{"name":"DataPithy","tagline":"a light database access tool ","body":"DataPithy\r\n=========\r\n\r\n\r\n\r\nDataPithy is a light database access tool \r\n\r\n\r\n## How to use\r\n\r\nexecute a query\r\n```CSharp\r\ndb.T( \"SELECT * FROM Members\" ).ExecuteDataTable();\r\n```\r\n\r\nexecute a query with parameter and return first row\r\n```CSharp\r\ndb.T( \"SELECT FirstName, LastName FROM Members WHERE Username = {0}\", username ).ExecuteFirstRow();\r\n```\r\n\r\nexecute a query as async.\r\n```CSharp\r\nawait db.T( \"SELECT FirstName, LastName FROM Members WHERE Username = {0}\", username ).ExecuteFirstRowAsync();\r\n```\r\n\r\n## Basic concept\r\n\r\n```CSharp\r\ndb.T( \"SELECT FirstName, LastName FROM Members WHERE Username = {0}\", username ).ExecuteFirstRow();\r\n```\r\n\r\nIn the code above, \r\n```db``` is called **database executor**,<br />\r\n```T( \"SELECT FirstName, LastName FROM Members WHERE Username = {0}\", username )``` is called **query definition**,<br />\r\nand ```ExecuteFirstRow()``` is called **result definition** <br />\r\n\r\n---\r\n\r\nThe following code creates a **database executor**         \r\n```CSharp\r\nvar db = SqlServer.Create( \"connection-string-name\" );\r\n```\r\nOr\r\n```CSharp\r\nvar db = SqlServer.Connect( \"connection-string\" );\r\n```\r\n\r\n**database executor** is responsible for createing connection and executing queries.\r\n\r\n----\r\n\r\nA typical **query definition** like this below\r\n```CSharp\r\ndb.T( \"query-text-template\", params parameters );\r\n```\r\nThe query text is SQL command to be executed. and you can use parameter placehold inside like ```string.Format``` syntax. like this below:\r\n```CSharp\r\ndb.T( \"SELECT MemberID FROM Members WHERE Username = {0} AND Password = {1}\", username, password )\r\n```\r\nit will create a SQL query like this below:\r\n```SQL\r\nDECLARE @Param0 AS nvarchar = 'text of username';\r\nDECLARE @Param1 AS nvarchar = 'text of password';\r\nSELECT MemberID FROM Members WHERE Username = @Param0 AND Password = @Param1;\r\n```\r\nthe method name **T** means **Template**, so we can also write code like below:\r\n```CSharp\r\ndb.Template( \"SELECT MemberID FROM Members WHERE Username = {0} AND Password = {1}\", username, password )\r\n```\r\nand the **T** is an **extension method**, you can declare another query definition method **as you like**.\r\n\r\n---\r\n\r\nIn the last, we talk about the **result definition**.\r\nlike same as the query definition, result definition are also en extension method. we have many result definition method, and all of they have asynchronous version.\r\nthe popular result definition method under this:\r\n\r\n**ExecuteNonQuery**, execute query, and return the number of rows affected.<br />\r\n**ExecuteScaler**, execute query and return the first column of the first row.<br />\r\n**ExecuteDataTable**, execute query and fill a DataTable and return.<br />\r\n**ExecuteFirstRow**, execute query and return ths first row.<br />\r\n**ExecuteEntity**, execute query and return the first row to fill the specified type of entity\r\n\r\n## Get It\r\n\r\nyou can download last stable release from nuget:\r\n[DataPithy](http://www.nuget.org/packages/DbWrench/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}